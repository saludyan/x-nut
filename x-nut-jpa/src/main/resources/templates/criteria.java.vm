package ${package.Criteria};

import ${package.Query}.Q${entity};
import lombok.Data;
import lombok.experimental.Accessors;
import com.querydsl.core.types.dsl.EntityPathBase;
import nut.jpa.criteria.ICriteria;
import nut.jpa.criteria.XCriteria;
import nut.jpa.criteria.XOrder;



import java.math.BigDecimal;
import java.util.Date;
import java.util.Set;

import static nut.jpa.criteria.XCriteriaCondition.*;
import static nut.jpa.criteria.XCriteriaOperator.*;

/**
 * $!{table.comment} 查询条件
 *
 * @author ${author}
 */
@Data
@Accessors(chain = true)
public class ${entity}Criteria implements ICriteria {

    private int pageNumber = 0;

    private int pageSize = 10;

    private Q${entity} q${entity.substring(0,1).toUpperCase()}${entity.substring(1)} = Q${entity}.${entity.toLowerCase()};

## ----------  BEGIN 字段循环遍历 添加成员变量 ----------
#foreach($field in ${table.fields})

## ----------  所有字段类型都有的查询条件  ----------
    /* ------------------------------------------------
     * ${field.propertyName} start
     * ------------------------------------------------
     */
    @XCriteria(column = "${field.propertyName}", op = and, cdt = eq)
    private ${field.propertyType} ${field.propertyName};

    @XCriteria(column = "${field.propertyName}", op = or, cdt = eq)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)};

    @XCriteria(column = "${field.propertyName}", op = and, cdt = in)
    private Set<${field.propertyType}> ${field.propertyName}In;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = in)
    private Set<${field.propertyType}> or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}In;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = notIn)
    private Set<${field.propertyType}> ${field.propertyName}NotIn;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = notIn)
    private Set<${field.propertyType}> or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}NotIn;

## ----------  String字段类型都有的查询条件  ----------
#if(${field.propertyType} == "String")
    @XCriteria(column = "${field.propertyName}", op = and, cdt = like)
    private ${field.propertyType} ${field.propertyName}Like;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = like)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}Like;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = notLike)
    private ${field.propertyType} ${field.propertyName}NotLike;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = notLike)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}NotLike;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = startWith)
    private ${field.propertyType} ${field.propertyName}StartWith;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = startWith)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}StartWith;
## ----------  Integer、Long、Date、BigDecimal字段类型都有的查询条件  ----------
#elseif(${field.propertyType} == "Integer" || ${field.propertyType} == "Long" || ${field.propertyType} == "Date" || ${field.propertyType} == "BigDecimal")
    @XCriteria(column = "${field.propertyName}", op = and, cdt = notEq)
    private ${field.propertyType} ${field.propertyName}NotEqual;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = eq)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}NotEqual;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = lessThan)
    private ${field.propertyType} ${field.propertyName}LessThan;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = eq)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}LessThan;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = lessThanEq)
    private ${field.propertyType} ${field.propertyName}LessThanEqual;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = lessThanEq)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}LessThanEqual;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = greaterThan)
    private ${field.propertyType} ${field.propertyName}GreaterThan;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = greaterThan)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}GreaterThan;

    @XCriteria(column = "${field.propertyName}", op = and, cdt = greaterThanEq)
    private ${field.propertyType} ${field.propertyName}GreaterThanEqual;

    @XCriteria(column = "${field.propertyName}", op = or, cdt = greaterThanEq)
    private ${field.propertyType} or${field.propertyName.substring(0,1).toUpperCase()}${field.propertyName.substring(1)}GreaterThanEqual;


#end
    @XOrder(column= "${field.propertyName}")
    private String ${field.propertyName}Order;
#end

    @Override
    public EntityPathBase getQEntity() {
        return q${entity.substring(0,1).toUpperCase()}${entity.substring(1)};
    }
## ----------  END 字段循环遍历 添加成员变量 ----------

}